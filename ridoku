#!/usr/bin/env ruby

require 'aws'
require 'logger'
require 'json'
require 'awesome_print'
require 'getoptlong'

class String
  def black;          "\033[30m#{self}\033[0m" end
  def red;            "\033[31m#{self}\033[0m" end
  def green;          "\033[32m#{self}\033[0m" end
  def  brown;         "\033[33m#{self}\033[0m" end
  def blue;           "\033[34m#{self}\033[0m" end
  def magenta;        "\033[35m#{self}\033[0m" end
  def cyan;           "\033[36m#{self}\033[0m" end
  def gray;           "\033[37m#{self}\033[0m" end
  def bg_black;       "\033[40m#{self}\0330m"  end
  def bg_red;         "\033[41m#{self}\033[0m" end
  def bg_green;       "\033[42m#{self}\033[0m" end
  def bg_brown;       "\033[43m#{self}\033[0m" end
  def bg_blue;        "\033[44m#{self}\033[0m" end
  def bg_magenta;     "\033[45m#{self}\033[0m" end
  def bg_cyan;        "\033[46m#{self}\033[0m" end
  def bg_gray;        "\033[47m#{self}\033[0m" end
  def bold;           "\033[1m#{self}\033[22m" end
  def reverse_color;  "\033[7m#{self}\033[27m" end
end

config = {
  access_key_id: ENV['AWS_ACCESS_KEY'],
  secret_access_key: ENV['AWS_SECRET_KEY']
}

RUNCOM = "#{File.dirname(__FILE__)}/.ridokurc"
@ridoku = {}
@config = {}

def load_config
  if File.exists?(RUNCOM)
    File.open(RUNCOM, 'r') do |file|
      @ridoku = JSON.load(file)
    end
  end
end

def save_config
  File.open(RUNCOM, 'w') do |file|
    file.write(@ridoku.to_json)
  end
end

def print_help
  $stderr.puts <<-EOF
  usage: ridoku [OPTIONS] command [command options]
    [--] is used to separate arguments from ridoku for each command
      e.g.,  'ridoku list-apps --help' display this help.
             'ridoku -- list-apps --help' displays list-apps help.

    commands:
      list
      config
      deploy
      domains
      db
      run
      cook
  EOF
end

def fetch_stack(client, app)
  stacks = client.describe_stacks
  @stack = nil
  stacks[:stacks].each do |stack|
    return @stack = stack if app == stack[:name]
  end
  return nil
end

opts = GetoptLong.new(
  [ '--debug', '-d', GetoptLong::NO_ARGUMENT ],
  [ '--key', '-k', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--secret', '-s', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--set-default-app', '-D', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--app', '-a', GetoptLong::REQUIRED_ARGUMENT]
)

load_config

@config[:app] = @ridoku['app']

opts.each do |opt, arg|
  case opt
  when '--debug'
    @config[:debug] = true

  when '--key'
    ENV['AWS_ACCESS_KEY'] = arg

  when '--secret'
    ENV['AWS_SECRET_KEY'] = arg

  when '--set-default-app'
    @ridoku['app'] = arg
    save_config
    puts "Default app name set to: #{@ridoku['app']}"
    exit 0

  when '--app'
    @config[:app] = arg

  else
    print_help
    exit 1
  end
end

unless ENV.key?('AWS_ACCESS_KEY') && ENV.key?('AWS_SECRET_KEY')
  puts 'AWS_ACCESS_KEY and AWS_SECRET_KEY must be specified in your environment.'
  print_help
  exit 1
end

unless @config[:app]
  puts 'No app specified. Use the `list-apps` command to see all apps.'
  print_help
  exit 1
end

if @config[:debug]
  # log to standard out, strip all of the Ruby logger standard prefixes
  logger = Logger.new($stdout)
  logger.formatter = proc { |severity, datetime, progname, msg| msg }

  config.merge!({
    logger: logger,
    log_formatter: AWS::Core::LogFormatter.colored,
    http_wire_trace: true
  })
end

AWS.config(config)

opsworks = AWS::OpsWorks.new
client = opsworks.client

@config[:command] = ARGV.shift.split(':')

if @config[:command][0] == 'help'
  print_help
  exit 0
end

fetch_stack(client, @config[:app])

load "#{File.dirname(__FILE__)}/.ridoku/#{@config[:command][0]}.rb"

unless defined?(:run_command)
  $stderr.puts "Invalid command specified: #{@config[:command][0]}"
  print_help
  exit 1
end

# begin
  run_command(client)
# rescue => e
#   $stderr.puts e.to_s
#   raise e if @config[:debug]
#   exit 1
# end