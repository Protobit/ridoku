#!/usr/bin/env ruby

require 'aws'
require 'logger'
require 'json'
require 'awesome_print'
require 'getoptlong'

require "ridoku/base.rb"

Dir.glob("ridoku/*.rb") do |class_file|
  require class_file
end

RUNCOM = "#{ENV['HOME']}/.ridokurc"

config = {
  access_key_id: ENV['AWS_ACCESS_KEY'],
  secret_access_key: ENV['AWS_SECRET_KEY']
}

@validations = []

def validate(opt, arg, &block)
  @validations << {
    option: opt,
    argument: arg,
    block: block
  }
end

def validate_arguments
  @validations.each do |val|
    val[:block].call(val[:option], val[:arguments])
  end
end

def print_help
  $stderr.puts <<-EOF
  usage: ridoku [OPTIONS] command [command options]
    [--] is used to separate arguments from ridoku for each command
      e.g.,  'ridoku list-apps --help' display this help.
             'ridoku -- list-apps --help' displays list-apps help.

    commands:
      list
      config
      deploy
      domains
      db
      run
      cook

  Apps and Stacks:

  Amazon OpsWorks similarly to Heroku, but, because you own all the resources,
  you'll have to provide a bit more information than you do to Heroku in order
  for this commandline utility to assist.

    Stacks:  The technology stack to use for a particular type of application.

      Heroku probably has a similar structure internally, because they allow
      you to use any number of program Stacks (Rails, PHP, Python, Go, etc). 
      The difference is that now in OpsWorks you control the stack environment,
      where on Heroku you did not.

      If you have a stack configured, you can view pertinent information using
      
      $ ridoku-cli list:stacks

      This will display the stacks that are currently associated with your AWS
      account.  To 

      To set the specific stack to use:

      $ ridoku-cli --set-stack <stackname>

      To set a single run stack or override the default:

      $ ridoku-cli --stack <stackname> --app <appname> command...

    Apps:  The actual application which runs on the technology stack.

      This is what you have control over on Heroku.  You can customize the app
      domains, database information, environment, etc, on a per-application
      basis.  The same goes for OpsWorks.

      To set the default app to use:

      $ ridoku-cli --set-app <stackname>

      To set a specific run app or override the default:

      $ ridoku-cli --stack <stackname> --app <appname> command...
  EOF
end

opts = GetoptLong.new(
  [ '--debug', '-d', GetoptLong::NO_ARGUMENT ],
  [ '--key', '-k', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--secret', '-s', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--set-app', '-D', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--set-stack', '-S', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--app', '-a', GetoptLong::REQUIRED_ARGUMENT],
  [ '--stack', '-t', GetoptLong::REQUIRED_ARGUMENT],
  [ '--comment', '-m', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--instance', '-i', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--user', '-u', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--layer', '-l', GetoptLong::REQUIRED_ARGUMENT ],
)

Ridoku::Base.load_config(RUNCOM)

opts.each do |opt, arg|
  case opt
  when '--debug'
    Ridoku::Base.config[:debug] = true

  when '--key'
    ENV['AWS_ACCESS_KEY'] = arg

  when '--secret'
    ENV['AWS_SECRET_KEY'] = arg

  when '--set-app'
    Ridoku::Base.config[:app] = arg
    Ridoku::Base.save_config(RUNCOM)

    puts "Default app name set to: #{Ridoku::Base.config[:app]}"
    exit 0

  when '--set-stack'
    Ridoku::Base.config[:stack] = arg
    Ridoku::Base.save_config(RUNCOM)

    puts "Default app name set to: #{Ridoku::Base.config[:stack]}"
    exit 0

  when '--stack'
    Ridoku::Base.config[:stack] = arg

  when '--user'
    Ridoku::Base.config[:shell_user] = arg

  when '--layer'
    Ridoku::Base.config[:layer] = arg

  when '--app'
    Ridoku::Base.config[:app] = arg

  when '--comment'
    Ridoku::Base.config[:comment] = arg

  when '--instance'
    Ridoku::Base.config[:instances] = arg.split(%r(,|\||;))

    validate(opt,arg) do |option, argument|
      unless Ridoku::Base.valid_instances?(Ridoku::Base.config[:instances])
        $stderr.puts 'Invalid instances provided.'

        validinst = []
        Ridoku::Base.instances.each do |inst|
          next unless inst[:status] == 'online'
          val = "#{inst[:hostname]} [#{inst[:status]}]"
          validinst << $stderr.colorize(val, [:bold, :green])
        end

        invalidinst = []
        Ridoku::Base.instances.each do |inst|
          next unless inst[:status] != 'online'
          val = "#{inst[:hostname]} [#{inst[:status]}]"
          invalidinst << $stderr.colorize(val, [:bold, :red])
        end

        $stderr.puts 'Valid Instances:'
        $stderr.puts validinst
        $stderr.puts 'Invalid Instances:'
        $stderr.puts invalidinst

        puts 'Run the help command to see more.'
        exit 1
      end
    end
  else
    print_help
    exit 1
  end
end

unless ENV.key?('AWS_ACCESS_KEY') && ENV.key?('AWS_SECRET_KEY')
  puts 'AWS_ACCESS_KEY and AWS_SECRET_KEY must be specified in your environment.'
  print_help
  exit 1
end

unless ARGV.length > 0
  puts 'No arguments specified.'
  print_help
  exit 1
end

if Ridoku::Base.config[:debug]
  # log to standard out, strip all of the Ruby logger standard prefixes
  logger = Logger.new($stdout)
  logger.formatter = proc { |severity, datetime, progname, msg| msg }

  config.merge!({
    logger: logger,
    log_formatter: AWS::Core::LogFormatter.colored,
    http_wire_trace: true
  })
end

AWS.config(config)

Ridoku::Base.config[:command] = ARGV.shift.split(':')

if Ridoku::Base.config[:command][0] == 'help'
  print_help
  exit 0
end

validate_arguments

begin
  command = Ridoku.const_get(
    Ridoku::Base.config[:command].first.capitalize
  ).new
rescue => e
  $stderr.puts "Invalid command specified: #{Ridoku::Base.config[:command][0]}"
  puts e.to_s if Ridoku::Base.config[:debug]
  print_help
  exit 1
end

begin
  command.run
rescue Ridoku::NoAppSpecified
  $stderr.puts 'No app specified. Use the `list:apps` command to see all apps.'
  print_help
  exit 1
rescue Ridoku::NoStackSpecified
  $stderr.puts 'No stack specified. Use the `list:stacks` command to see all stacks.'
  print_help
  exit 1
rescue Ridoku::NoSshAccess
  $stderr.puts 'Your user does not have access to ssh on the specified stack.'
  print_help
  exit 1
end
