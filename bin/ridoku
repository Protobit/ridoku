#!/usr/bin/env ruby

require 'aws'
require 'logger'
require 'json'
require 'getoptlong'

require 'io-colorize'

require 'require_all'
require_rel '../lib/ridoku'

RUNCOM = "#{ENV['HOME']}/.ridokurc"

config = {
  access_key_id: ENV['AWS_ACCESS_KEY'],
  secret_access_key: ENV['AWS_SECRET_KEY']
}

@validations = []

def validate(opt, arg, &block)
  @validations << {
    option: opt,
    argument: arg,
    block: block
  }
end

def validate_arguments
  @validations.each do |val|
    val[:block].call(val[:option], val[:argument])
  end
end

def print_help(full = false)
  $stderr.puts <<-EOF
  Ridoku, #{Ridoku::VERSION}
  usage: ridoku [OPTIONS] command [command options]

    commands:
      list
      config
      deploy
      domain
      db
      run
      cook
      create
  EOF

  if full
    $stderr.puts <<-EOF
  #{Ridoku::ConfigWizard.help_text}

  Apps and Stacks:

  Amazon OpsWorks similarly to Heroku, but, because you own all the resources,
  you'll have to provide a bit more information than you do to Heroku in order
  for this commandline utility to assist.

    Stacks:  The technology stack to use for a particular type of application.

      Heroku probably has a similar structure internally, because they allow
      you to use any number of program Stacks (Rails, PHP, Python, Go, etc). 
      The difference is that now in OpsWorks you control the stack environment,
      where on Heroku you did not.

      If you have a stack configured, you can view pertinent information using
      
      $ ridoku list:stacks

      This will display the stacks that are currently associated with your AWS
      account.  To 

      To set the specific stack to use:

      $ ridoku --set-stack <stackname>

      To set a single run stack or override the default:

      $ ridoku --stack <stackname> --app <appname> command...

    Apps:  The actual application which runs on the technology stack.

      This is what you have control over on Heroku.  You can customize the app
      domains, database information, environment, etc, on a per-application
      basis.  The same goes for OpsWorks.

      To set the default app to use:

      $ ridoku --set-app <stackname>

      To set a specific run app or override the default:

      $ ridoku --stack <stackname> --app <appname> command...
  EOF
  end
end

opts = GetoptLong.new(
  [ '--debug', '-D', GetoptLong::NO_ARGUMENT ],
  [ '--key', '-k', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--secret', '-s', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--set-app', '-A', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--set-stack', '-S', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--set-user', '-U', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--set-ssh-key', '-K', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--ssh-key', '-f', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--app', '-a', GetoptLong::REQUIRED_ARGUMENT],
  [ '--stack', '-t', GetoptLong::REQUIRED_ARGUMENT],
  [ '--comment', '-m', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--instances', '-i', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--domains', '-d', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--user', '-u', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--layer', '-l', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--repo', '-r', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--service-arn', '-n', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--instance-arn', '-N', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--practice', '-p', GetoptLong::NO_ARGUMENT ],
  [ '--wizard', '-w', GetoptLong::NO_ARGUMENT ],
)

opts.quiet = true

Ridoku::Base.load_config(RUNCOM)

begin
  opts.each do |opt, arg|
    case opt
    when '--debug'
      Ridoku::Base.config[:debug] = true

    when '--practice'
      Ridoku::Base.config[:practice] = true

    when '--key'
      ENV['AWS_ACCESS_KEY'] = arg

    when '--secret'
      ENV['AWS_SECRET_KEY'] = arg

    when '--set-app'
      Ridoku::Base.config[:app] = arg
      Ridoku::Base.save_config(RUNCOM)

      puts "Default app set to: #{arg}"
    when '--set-stack'
      Ridoku::Base.config[:stack] = arg
      Ridoku::Base.save_config(RUNCOM)

      puts "Default stack set to: #{arg}"
    when '--set-user'
      Ridoku::Base.config[:shell_user] = arg
      Ridoku::Base.save_config(RUNCOM)

      puts "Default shell user set to: #{arg}"
    when '--set-ssh-key'
      Ridoku::Base.config[:ssh_key] = arg

      validate(opt,arg) do |option, argument|
        if File.exists?(argument)
          Ridoku::Base.save_config(RUNCOM)
        else
          $stderr.puts 'Specified SSH Key file does not exist!'
          print_help
          exit 1
        end
      end

      puts "Default shell user set to: #{arg}"
    when '--ssh-key'
      Ridoku::Base.config[:ssh_key] = arg

    when '--repo'
      Ridoku::Base.config[:repo] = arg

    when '--domains'
      Ridoku::Base.config[:domains] = arg.split(%r(\||;|:|,))

    when '--service-arn'
      Ridoku::Base.config[:service_arn] = arg

    when '--rails-env'
      Ridoku::Base.config[:rails_env] = arg

    when '--instance-arn'
      Ridoku::Base.config[:instance_arn] = arg

    when '--wizard'
      Ridoku::Base.config[:wizard] = true

    when '--stack'
      Ridoku::Base.config[:stack] = arg

    when '--user'
      Ridoku::Base.config[:shell_user] = arg

    when '--layer'
      Ridoku::Base.config[:layer] = arg

    when '--app'
      Ridoku::Base.config[:app] = arg

    when '--comment'
      Ridoku::Base.config[:comment] = arg

    when '--instances'
      Ridoku::Base.config[:instances] = arg.split(%r(,|\||;|:))

      validate(opt,arg) do |option, argument|
        unless Ridoku::Base.valid_instances?(argument)
          $stderr.puts 'Invalid instances provided.'

          validinst = []
          Ridoku::Base.instances.each do |inst|
            next unless inst[:status] != 'stopped'
            val = "#{inst[:hostname]} [#{inst[:status]}]"
            validinst << $stderr.colorize(val, [:bold, :green])
          end

          invalidinst = []
          Ridoku::Base.instances.each do |inst|
            next unless inst[:status] != 'online'
            val = "#{inst[:hostname]} [#{inst[:status]}]"
            invalidinst << $stderr.colorize(val, [:bold, :red])
          end

          $stderr.puts 'Valid Instances:'
          $stderr.puts validinst
          $stderr.puts 'Invalid Instances:'
          $stderr.puts invalidinst

          puts 'Run the help command to see more.'
          exit 1
        end
      end
    else
      print_help
      exit 1
    end
  end
rescue => e
  puts e.to_s
  print_help
  exit 1
end

unless ENV.key?('AWS_ACCESS_KEY') && ENV.key?('AWS_SECRET_KEY')
  puts 'AWS_ACCESS_KEY and AWS_SECRET_KEY must be specified in your environment.'
  print_help
  exit 1
end

AWS.config(config)

if !Ridoku::Base.config[:local_init] || Ridoku::Base.config[:wizard]
  begin
    wizard = Ridoku::ConfigWizard.new
    wizard.run
  rescue Ridoku::InvalidConfig => e
    $stderr.puts "#{e.error.to_s.capitalize} #{e.type.to_s} specified."
    $stderr.puts 'Use the `list` command to see relavent info.'
    print_help
    exit 1
  end
end

validate_arguments

unless ARGV.length > 0
  puts 'No arguments specified.'
  print_help
  exit 1
end

if Ridoku::Base.config[:debug]
  # log to standard out, strip all of the Ruby logger standard prefixes
  logger = Logger.new($stdout)
  logger.formatter = proc { |severity, datetime, progname, msg| msg }

  config.merge!({
    logger: logger,
    log_formatter: AWS::Core::LogFormatter.colored,
    http_wire_trace: true
  })
end

Ridoku::Base.config[:command] = ARGV.shift.split(':')

if Ridoku::Base.config[:command][0] == 'help'
  print_help(true)
  exit 0
end

begin
  command = Ridoku.const_get(
    Ridoku::Base.config[:command].first.capitalize
  ).new
rescue => e
  $stderr.puts "Invalid command specified: #{Ridoku::Base.config[:command][0]}"
  puts e.to_s if Ridoku::Base.config[:debug]
  print_help
  exit 1
end

begin
  command.run
rescue Ridoku::InvalidConfig => e
  $stderr.puts "#{e.error.to_s.capitalize} #{e.type.to_s} specified."
  $stderr.puts 'Use the `list` command to see relavent info.'
  print_help
  exit 1
rescue Ridoku::NoSshAccess
  $stderr.puts 'Your user does not have access to ssh on the specified stack.'
  print_help
  exit 1
rescue ArgumentError => e
  raise e if Ridoku::Base.config[:debug]
  $stderr.puts e.to_s
end
